env RABBITMQ_USER;
env RABBITMQ_PASS;

events
{
	worker_connections 1024;
}

http
{
	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	# server
	# {
	# 	listen 80;
	# 	server_name shortlink.com;
	#
	# 	return 301 https://$host$request_uri;
	# }

	server
	{
		# listen 443 ssl;
		listen 80;
		server_name localhost;

		lua_code_cache off;
		lua_need_request_body off;
		default_type text/plain;

		resolver 127.0.0.11 ipv6=off;

		# ssl_certificate /etc/nginx/ssl/server.crt;
		# ssl_certificate_key /etc/nginx/ssl/server.key;
		#
		# ssl_protocols TLSv1.2 TLSv1.3;
		# ssl_prefer_server_ciphers on;

		access_log /dev/stdout;
		error_log /dev/stderr;

		root /dev/null;

		location / {
			set $memcached_key $uri;
			default_type text/plain;

			content_by_lua_block {
				local memcached = require "resty.memcached"
				local rabbitmq = require "resty.rabbitmqstomp"
				local cjson = require "cjson.safe"

				local analytics_buffer = {}

				local rabbitmq_user = os.getenv("RABBITMQ_USER") or "guest"
				local rabbitmq_pass = os.getenv("RABBITMQ_PASS") or "guest"

				local function send_batch_to_rabbitmq(premature)
					if premature then return end

					if #analytics_buffer == 0 then
						return
					end

					local rabbit, err = rabbitmq:new({
						username = rabbitmq_user,
						password = rabbitmq_pass,
						vhost = "/"
					})
					if not rabbit then
						ngx.log(ngx.ERR, "Error creating RabbitMQ: ", err)
						return
					end
					rabbit:set_timeout(1000)

					local ok, err = rabbit:connect("tu-rabbitmq", 61613)
					if not ok then
						ngx.log(ngx.ERR, "Error connecting to RabbitMQ: ", err)
						return
					end

					local msg = cjson.encode(analytics_buffer)
					local headers = {
						destination = "/queue/analytics",
						persistent = "true",
						["content-type"] = "application/json"
					}

					local ok, err = rabbit:send(msg, headers)
					if not ok then
						ngx.log(ngx.ERR, "Error sending message to RabbitMQ: ", err)
					else
						ngx.log(ngx.INFO, "Sent ", #analytics_buffer, " messages to RabbitMQ")
						analytics_buffer = {}
					end

					rabbit:close()
				end

				local function add_to_analytics_buffer(event)
					table.insert(analytics_buffer, event)

					if #analytics_buffer >= 10 then
						send_batch_to_rabbitmq(false)
					end
				end

				if ngx.worker.id() == 0 then
					ngx.timer.every(5, send_batch_to_rabbitmq)
				end

				local memc = memcached:new()
				memc:set_timeout(1000)

				local ok, err = memc:connect("tu-memcached", 11211)
				if not ok then
					ngx.log(ngx.ERR, "Error connecting to Memcached: ", err)
					ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
					return
				end

				local key = ngx.var.uri:sub(2)
				local res, flags, err = memc:get(key)
				memc:close()

				if not res then
					ngx.log(ngx.ERR, "Error getting value from Memcached: ", key)
					ngx.exit(ngx.HTTP_NOT_FOUND)
				end

				local analytics_data = {
					ip = ngx.var.remote_addr,
					referer = ngx.var.http_referer or "direct",
					user_agent = ngx.var.http_user_agent,
					timestamp = ngx.time(),
					short_link = key,
					destination = res
				}

				add_to_analytics_buffer(analytics_data)

				ngx.redirect(res, ngx.HTTP_MOVED_TEMPORARILY)
			}
		}

# 		location / {
#             set $memcached_key $request_uri;
#             memcached_pass tu-memcached:11211;
#             error_page 404 = @fetch_from_backend;
#
#             set $user_ip $remote_addr;
#             set $referer $http_referer;
#             set $user_agent $http_user_agent;
#
#             proxy_pass_request_body off;
#             proxy_set_header Content-Length 0;
#             proxy_set_header User-IP $user_ip;
#             proxy_set_header Referer $referer;
#             proxy_set_header User-Agent $user_agent;
#             proxy_pass http://backend_service/track;
#         }
	}
}
