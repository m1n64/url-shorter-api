// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.24.4
// source: proto/analytics.proto

package analytics

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnalyticsCleanRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShortUrl      string                 `protobuf:"bytes,1,opt,name=short_url,json=shortUrl,proto3" json:"short_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyticsCleanRequest) Reset() {
	*x = AnalyticsCleanRequest{}
	mi := &file_proto_analytics_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyticsCleanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsCleanRequest) ProtoMessage() {}

func (x *AnalyticsCleanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analytics_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsCleanRequest.ProtoReflect.Descriptor instead.
func (*AnalyticsCleanRequest) Descriptor() ([]byte, []int) {
	return file_proto_analytics_proto_rawDescGZIP(), []int{0}
}

func (x *AnalyticsCleanRequest) GetShortUrl() string {
	if x != nil {
		return x.ShortUrl
	}
	return ""
}

type AnalyticsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShortUrl      string                 `protobuf:"bytes,1,opt,name=short_url,json=shortUrl,proto3" json:"short_url,omitempty"`
	StartDate     *uint64                `protobuf:"varint,2,opt,name=start_date,json=startDate,proto3,oneof" json:"start_date,omitempty"`
	EndDate       *uint64                `protobuf:"varint,3,opt,name=end_date,json=endDate,proto3,oneof" json:"end_date,omitempty"`
	Device        *string                `protobuf:"bytes,4,opt,name=device,proto3,oneof" json:"device,omitempty"`
	Browser       *string                `protobuf:"bytes,5,opt,name=browser,proto3,oneof" json:"browser,omitempty"`
	Os            *string                `protobuf:"bytes,6,opt,name=os,proto3,oneof" json:"os,omitempty"`
	Country       *string                `protobuf:"bytes,7,opt,name=country,proto3,oneof" json:"country,omitempty"`
	Page          *uint32                `protobuf:"varint,8,opt,name=page,proto3,oneof" json:"page,omitempty"`
	PerPage       *uint32                `protobuf:"varint,9,opt,name=per_page,json=perPage,proto3,oneof" json:"per_page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyticsRequest) Reset() {
	*x = AnalyticsRequest{}
	mi := &file_proto_analytics_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsRequest) ProtoMessage() {}

func (x *AnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analytics_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsRequest.ProtoReflect.Descriptor instead.
func (*AnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_proto_analytics_proto_rawDescGZIP(), []int{1}
}

func (x *AnalyticsRequest) GetShortUrl() string {
	if x != nil {
		return x.ShortUrl
	}
	return ""
}

func (x *AnalyticsRequest) GetStartDate() uint64 {
	if x != nil && x.StartDate != nil {
		return *x.StartDate
	}
	return 0
}

func (x *AnalyticsRequest) GetEndDate() uint64 {
	if x != nil && x.EndDate != nil {
		return *x.EndDate
	}
	return 0
}

func (x *AnalyticsRequest) GetDevice() string {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return ""
}

func (x *AnalyticsRequest) GetBrowser() string {
	if x != nil && x.Browser != nil {
		return *x.Browser
	}
	return ""
}

func (x *AnalyticsRequest) GetOs() string {
	if x != nil && x.Os != nil {
		return *x.Os
	}
	return ""
}

func (x *AnalyticsRequest) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *AnalyticsRequest) GetPage() uint32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *AnalyticsRequest) GetPerPage() uint32 {
	if x != nil && x.PerPage != nil {
		return *x.PerPage
	}
	return 0
}

type AnalyticsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShortUrl      string                 `protobuf:"bytes,1,opt,name=short_url,json=shortUrl,proto3" json:"short_url,omitempty"`
	TotalClicks   uint32                 `protobuf:"varint,3,opt,name=total_clicks,json=totalClicks,proto3" json:"total_clicks,omitempty"`
	UniqueClicks  uint32                 `protobuf:"varint,4,opt,name=unique_clicks,json=uniqueClicks,proto3" json:"unique_clicks,omitempty"`
	Analytics     []*Analytics           `protobuf:"bytes,5,rep,name=analytics,proto3" json:"analytics,omitempty"`
	Page          uint32                 `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	TotalPages    uint32                 `protobuf:"varint,7,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	PerPage       uint32                 `protobuf:"varint,8,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyticsResponse) Reset() {
	*x = AnalyticsResponse{}
	mi := &file_proto_analytics_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsResponse) ProtoMessage() {}

func (x *AnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analytics_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsResponse.ProtoReflect.Descriptor instead.
func (*AnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_proto_analytics_proto_rawDescGZIP(), []int{2}
}

func (x *AnalyticsResponse) GetShortUrl() string {
	if x != nil {
		return x.ShortUrl
	}
	return ""
}

func (x *AnalyticsResponse) GetTotalClicks() uint32 {
	if x != nil {
		return x.TotalClicks
	}
	return 0
}

func (x *AnalyticsResponse) GetUniqueClicks() uint32 {
	if x != nil {
		return x.UniqueClicks
	}
	return 0
}

func (x *AnalyticsResponse) GetAnalytics() []*Analytics {
	if x != nil {
		return x.Analytics
	}
	return nil
}

func (x *AnalyticsResponse) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AnalyticsResponse) GetTotalPages() uint32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *AnalyticsResponse) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type Analytics struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ShortUrl       string                 `protobuf:"bytes,1,opt,name=short_url,json=shortUrl,proto3" json:"short_url,omitempty"`
	Ip             string                 `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	UserAgent      string                 `protobuf:"bytes,3,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Country        string                 `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	Browser        string                 `protobuf:"bytes,5,opt,name=browser,proto3" json:"browser,omitempty"`
	BrowserVersion string                 `protobuf:"bytes,6,opt,name=browser_version,json=browserVersion,proto3" json:"browser_version,omitempty"`
	Os             string                 `protobuf:"bytes,7,opt,name=os,proto3" json:"os,omitempty"`
	OsVersion      string                 `protobuf:"bytes,8,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	Device         string                 `protobuf:"bytes,9,opt,name=device,proto3" json:"device,omitempty"`
	Timestamp      uint64                 `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Analytics) Reset() {
	*x = Analytics{}
	mi := &file_proto_analytics_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Analytics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Analytics) ProtoMessage() {}

func (x *Analytics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analytics_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Analytics.ProtoReflect.Descriptor instead.
func (*Analytics) Descriptor() ([]byte, []int) {
	return file_proto_analytics_proto_rawDescGZIP(), []int{3}
}

func (x *Analytics) GetShortUrl() string {
	if x != nil {
		return x.ShortUrl
	}
	return ""
}

func (x *Analytics) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Analytics) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *Analytics) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Analytics) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

func (x *Analytics) GetBrowserVersion() string {
	if x != nil {
		return x.BrowserVersion
	}
	return ""
}

func (x *Analytics) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Analytics) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *Analytics) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Analytics) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type CountryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalClicks   uint32                 `protobuf:"varint,1,opt,name=total_clicks,json=totalClicks,proto3" json:"total_clicks,omitempty"`
	Country       []*DistinctData        `protobuf:"bytes,2,rep,name=country,proto3" json:"country,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountryResponse) Reset() {
	*x = CountryResponse{}
	mi := &file_proto_analytics_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryResponse) ProtoMessage() {}

func (x *CountryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analytics_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryResponse.ProtoReflect.Descriptor instead.
func (*CountryResponse) Descriptor() ([]byte, []int) {
	return file_proto_analytics_proto_rawDescGZIP(), []int{4}
}

func (x *CountryResponse) GetTotalClicks() uint32 {
	if x != nil {
		return x.TotalClicks
	}
	return 0
}

func (x *CountryResponse) GetCountry() []*DistinctData {
	if x != nil {
		return x.Country
	}
	return nil
}

type DeviceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalClicks   uint32                 `protobuf:"varint,1,opt,name=total_clicks,json=totalClicks,proto3" json:"total_clicks,omitempty"`
	Device        []*DistinctData        `protobuf:"bytes,2,rep,name=device,proto3" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceResponse) Reset() {
	*x = DeviceResponse{}
	mi := &file_proto_analytics_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceResponse) ProtoMessage() {}

func (x *DeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analytics_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceResponse.ProtoReflect.Descriptor instead.
func (*DeviceResponse) Descriptor() ([]byte, []int) {
	return file_proto_analytics_proto_rawDescGZIP(), []int{5}
}

func (x *DeviceResponse) GetTotalClicks() uint32 {
	if x != nil {
		return x.TotalClicks
	}
	return 0
}

func (x *DeviceResponse) GetDevice() []*DistinctData {
	if x != nil {
		return x.Device
	}
	return nil
}

type BrowserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalClicks   uint32                 `protobuf:"varint,1,opt,name=total_clicks,json=totalClicks,proto3" json:"total_clicks,omitempty"`
	Browser       []*DistinctData        `protobuf:"bytes,2,rep,name=browser,proto3" json:"browser,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BrowserResponse) Reset() {
	*x = BrowserResponse{}
	mi := &file_proto_analytics_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BrowserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowserResponse) ProtoMessage() {}

func (x *BrowserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analytics_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowserResponse.ProtoReflect.Descriptor instead.
func (*BrowserResponse) Descriptor() ([]byte, []int) {
	return file_proto_analytics_proto_rawDescGZIP(), []int{6}
}

func (x *BrowserResponse) GetTotalClicks() uint32 {
	if x != nil {
		return x.TotalClicks
	}
	return 0
}

func (x *BrowserResponse) GetBrowser() []*DistinctData {
	if x != nil {
		return x.Browser
	}
	return nil
}

type OSResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalClicks   uint32                 `protobuf:"varint,1,opt,name=total_clicks,json=totalClicks,proto3" json:"total_clicks,omitempty"`
	Os            []*DistinctData        `protobuf:"bytes,2,rep,name=os,proto3" json:"os,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OSResponse) Reset() {
	*x = OSResponse{}
	mi := &file_proto_analytics_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSResponse) ProtoMessage() {}

func (x *OSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analytics_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSResponse.ProtoReflect.Descriptor instead.
func (*OSResponse) Descriptor() ([]byte, []int) {
	return file_proto_analytics_proto_rawDescGZIP(), []int{7}
}

func (x *OSResponse) GetTotalClicks() uint32 {
	if x != nil {
		return x.TotalClicks
	}
	return 0
}

func (x *OSResponse) GetOs() []*DistinctData {
	if x != nil {
		return x.Os
	}
	return nil
}

type DistinctData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Count         uint32                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Percentage    uint32                 `protobuf:"varint,3,opt,name=percentage,proto3" json:"percentage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DistinctData) Reset() {
	*x = DistinctData{}
	mi := &file_proto_analytics_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DistinctData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistinctData) ProtoMessage() {}

func (x *DistinctData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analytics_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistinctData.ProtoReflect.Descriptor instead.
func (*DistinctData) Descriptor() ([]byte, []int) {
	return file_proto_analytics_proto_rawDescGZIP(), []int{8}
}

func (x *DistinctData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DistinctData) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DistinctData) GetPercentage() uint32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

type ClicksByDayResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Clicks        []*Click               `protobuf:"bytes,1,rep,name=clicks,proto3" json:"clicks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClicksByDayResponse) Reset() {
	*x = ClicksByDayResponse{}
	mi := &file_proto_analytics_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClicksByDayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClicksByDayResponse) ProtoMessage() {}

func (x *ClicksByDayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analytics_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClicksByDayResponse.ProtoReflect.Descriptor instead.
func (*ClicksByDayResponse) Descriptor() ([]byte, []int) {
	return file_proto_analytics_proto_rawDescGZIP(), []int{9}
}

func (x *ClicksByDayResponse) GetClicks() []*Click {
	if x != nil {
		return x.Clicks
	}
	return nil
}

type Click struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalClicks   uint32                 `protobuf:"varint,1,opt,name=total_clicks,json=totalClicks,proto3" json:"total_clicks,omitempty"`
	Timestamp     uint64                 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Click) Reset() {
	*x = Click{}
	mi := &file_proto_analytics_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Click) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Click) ProtoMessage() {}

func (x *Click) ProtoReflect() protoreflect.Message {
	mi := &file_proto_analytics_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Click.ProtoReflect.Descriptor instead.
func (*Click) Descriptor() ([]byte, []int) {
	return file_proto_analytics_proto_rawDescGZIP(), []int{10}
}

func (x *Click) GetTotalClicks() uint32 {
	if x != nil {
		return x.TotalClicks
	}
	return 0
}

func (x *Click) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_proto_analytics_proto protoreflect.FileDescriptor

var file_proto_analytics_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x22, 0x34, 0x0a, 0x15, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x22, 0xf8, 0x02, 0x0a, 0x10, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6f, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x02, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x07, 0x70, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6f,
	0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x11, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x32,
	0x0a, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x09, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x67,
	0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x64, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x2f, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x67, 0x0a,
	0x0f, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x62,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x22, 0x58, 0x0a, 0x0a, 0x4f, 0x53, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x27, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x02, 0x6f, 0x73,
	0x22, 0x58, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x13, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x22, 0x48, 0x0a, 0x05, 0x43,
	0x6c, 0x69, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x32, 0xdb, 0x03, 0x0a, 0x10, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x69, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x20, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73,
	0x42, 0x79, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x1b, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4f, 0x53, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x1b, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4f, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x25, 0x5a, 0x23, 0x2e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x3b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_proto_analytics_proto_rawDescOnce sync.Once
	file_proto_analytics_proto_rawDescData []byte
)

func file_proto_analytics_proto_rawDescGZIP() []byte {
	file_proto_analytics_proto_rawDescOnce.Do(func() {
		file_proto_analytics_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_analytics_proto_rawDesc), len(file_proto_analytics_proto_rawDesc)))
	})
	return file_proto_analytics_proto_rawDescData
}

var file_proto_analytics_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_analytics_proto_goTypes = []any{
	(*AnalyticsCleanRequest)(nil), // 0: analytics.AnalyticsCleanRequest
	(*AnalyticsRequest)(nil),      // 1: analytics.AnalyticsRequest
	(*AnalyticsResponse)(nil),     // 2: analytics.AnalyticsResponse
	(*Analytics)(nil),             // 3: analytics.Analytics
	(*CountryResponse)(nil),       // 4: analytics.CountryResponse
	(*DeviceResponse)(nil),        // 5: analytics.DeviceResponse
	(*BrowserResponse)(nil),       // 6: analytics.BrowserResponse
	(*OSResponse)(nil),            // 7: analytics.OSResponse
	(*DistinctData)(nil),          // 8: analytics.DistinctData
	(*ClicksByDayResponse)(nil),   // 9: analytics.ClicksByDayResponse
	(*Click)(nil),                 // 10: analytics.Click
}
var file_proto_analytics_proto_depIdxs = []int32{
	3,  // 0: analytics.AnalyticsResponse.analytics:type_name -> analytics.Analytics
	8,  // 1: analytics.CountryResponse.country:type_name -> analytics.DistinctData
	8,  // 2: analytics.DeviceResponse.device:type_name -> analytics.DistinctData
	8,  // 3: analytics.BrowserResponse.browser:type_name -> analytics.DistinctData
	8,  // 4: analytics.OSResponse.os:type_name -> analytics.DistinctData
	10, // 5: analytics.ClicksByDayResponse.clicks:type_name -> analytics.Click
	1,  // 6: analytics.AnalyticsService.GetGeneralStats:input_type -> analytics.AnalyticsRequest
	0,  // 7: analytics.AnalyticsService.GetClicksPerDay:input_type -> analytics.AnalyticsCleanRequest
	1,  // 8: analytics.AnalyticsService.GetCountriesStats:input_type -> analytics.AnalyticsRequest
	1,  // 9: analytics.AnalyticsService.GetDeviceStats:input_type -> analytics.AnalyticsRequest
	1,  // 10: analytics.AnalyticsService.GetBrowserStats:input_type -> analytics.AnalyticsRequest
	1,  // 11: analytics.AnalyticsService.GetOSStats:input_type -> analytics.AnalyticsRequest
	2,  // 12: analytics.AnalyticsService.GetGeneralStats:output_type -> analytics.AnalyticsResponse
	9,  // 13: analytics.AnalyticsService.GetClicksPerDay:output_type -> analytics.ClicksByDayResponse
	4,  // 14: analytics.AnalyticsService.GetCountriesStats:output_type -> analytics.CountryResponse
	5,  // 15: analytics.AnalyticsService.GetDeviceStats:output_type -> analytics.DeviceResponse
	6,  // 16: analytics.AnalyticsService.GetBrowserStats:output_type -> analytics.BrowserResponse
	7,  // 17: analytics.AnalyticsService.GetOSStats:output_type -> analytics.OSResponse
	12, // [12:18] is the sub-list for method output_type
	6,  // [6:12] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_proto_analytics_proto_init() }
func file_proto_analytics_proto_init() {
	if File_proto_analytics_proto != nil {
		return
	}
	file_proto_analytics_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_analytics_proto_rawDesc), len(file_proto_analytics_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_analytics_proto_goTypes,
		DependencyIndexes: file_proto_analytics_proto_depIdxs,
		MessageInfos:      file_proto_analytics_proto_msgTypes,
	}.Build()
	File_proto_analytics_proto = out.File
	file_proto_analytics_proto_goTypes = nil
	file_proto_analytics_proto_depIdxs = nil
}
